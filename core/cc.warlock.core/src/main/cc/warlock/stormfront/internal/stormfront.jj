PARSER_BEGIN(StormFrontProtocolParser)
package cc.warlock.stormfront.internal;

import cc.warlock.stormfront.IStormFrontProtocolHandler;
import java.util.Map;
import java.util.HashMap;

public class StormFrontProtocolParser {
	protected IStormFrontProtocolHandler handler;
	protected Map<String,String> currentAttributes = new HashMap<String,String>();
	
	public void setHandler (IStormFrontProtocolHandler handler)
	{
		this.handler = handler;
	}
	
	protected void characters (String characters)
	{
		// System.out.println("characters: " + string);
		handler.characters(characters.toCharArray(), 0, characters.length());
	}
	
	protected void startElement (String name)
	{
		// System.out.println("startElement: " + name.image);
		
		handler.startElement(name, currentAttributes);
	}
	
	protected void addAttribute (String name, String value)
	{	
		// System.out.println("addAttribute name=" + name.image + ",value=" +newValue);
		
		currentAttributes.put(name, value);
	}
	
	protected void endElement (String name)
	{
		// System.out.println("end element: " + name.image);
		
		handler.endElement(name);
		currentAttributes.clear();
	}
}

PARSER_END(StormFrontProtocolParser)

void Document() : {}
{
	(Element())*
}

void Element() : {Token data; String str; }
{
	(
	Tag()
	| ( data=<PCDATA> { characters(data.image); } )
	| ( str=Entity() { characters(str); } )
	)
}

void Tag() : {Token name;}
{
	<TAG_START_OPEN> name=<GENERIC_ID> (Attribute())* {  startElement(name.image); } ((<TAG_CLOSE> (Element())* EndTag()) | <TAG_EMPTY_CLOSE> { endElement(name.image); })
}

void Attribute(): {Token name, value;}
{
	name=<GENERIC_ID> { value = name; } (<ATTR_EQ> value=<ATTR_VALUE>)?	{ addAttribute(name.image,value.image); }
}

void EndTag(): {Token name;}
{
	<TAG_END_OPEN> name=<GENERIC_ID> <TAG_CLOSE> { endElement(name.image); }
}

String Entity(): { }
{
	( <ENTITY_GT>	{ return ">"; }
	| <ENTITY_LT>	{ return "<"; }
	| <ENTITY_APOS> { return "'"; }
	| <ENTITY_AMP> { return "&"; }
	| <ENTITY_169> { return "©"; }
	)
}

TOKEN: {
	<TAG_START_OPEN: "<"> : IN_TAG_MODE |
	<TAG_END_OPEN: "</"> : IN_TAG_MODE |
	
	<ENTITY_GT: "&gt;"> |
	<ENTITY_LT: "&lt;"> |
	<ENTITY_APOS: "&apos;"> |
	<ENTITY_AMP: "&amp;"> |
	<ENTITY_169: "&#169;"> |
	<PCDATA: (~["<","\r","\n","&"])+ | "&" | (["\r","\n"])+> |
	 <NAMECHAR: (<LETTER> | <DIGIT> | "." | "-" | "_" | ":")> |
	 <DIGIT: (["0"-"9"])> |
	 <LETTER: (["A"-"Z","a"-"z"])>
}

<IN_TAG_MODE> TOKEN: {
	<TAG_CLOSE: ">" (("\r")? "\n")?> : DEFAULT |
	<TAG_EMPTY_CLOSE: "/>"> : DEFAULT |
	
		
	<ATTR_EQ: "="> |
	<ATTR_VALUE: ("\"" (~["\""])* "\"" | "'" (~["'"])* "'")> { matchedToken.image = matchedToken.image.substring(1, matchedToken.image.length() - 1); }|
	
	<GENERIC_ID: (<LETTER> | "_" | ":") (<NAMECHAR>)*> 
}

<IN_TAG_MODE> SKIP: {
	 <WS: ([" ","\r","\t","\u000C","\n"])>
}