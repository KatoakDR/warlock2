grammar WarlockWSL;

@parser::header {
	package cc.warlock.script.wsl;
	import java.util.ArrayList;
}

@lexer::header {
	package cc.warlock.script.wsl;
}

@parser::members {
	private WarlockWSLScript script;
	private int lineNum = 1;
	public void setScript(WarlockWSLScript s) { script = s; }
}

@lexer::members {
	private enum State { base, command, condition }
	private boolean atStart = true;
	private State state = State.base;
}

script
	: line* EOF { script.stopScript(); }
	;

line
	: (COMMENT | expr)? EOL { System.out.print("passed line " + Integer.toString(lineNum) + "\n"); lineNum++; }
	;

expr returns [WarlockWSLScriptLine line]
	: (label=LABEL (l=expr)? {
		if (l == null) {
			line = new WarlockWSLScriptLine(script, lineNum);
			script.addLine(line);
		} else {
			line = l;
		}
		
		script.addLabel($label.text, line);
	})
	| args=arg_list		{
				line = new WarlockWSLScriptLine(script, lineNum);
				line.addArgs(args);
				script.addLine(line);
				System.out.print("added line " + Integer.toString(lineNum) + "\n");
	/*
	| (IF conditional THEN
		expr)*/
		}
	;

arg_list returns [ArrayList<WarlockWSLScriptArg> list]
	:	{ list = new ArrayList<WarlockWSLScriptArg>(); }
	| data=script_data l=arg_list	{ list = l; list.add(0, data); }
	;

script_data returns [WarlockWSLScriptArg arg]
	: str=STRING		{ arg = new WarlockWSLScriptString($str.text); }
	| var=VARIABLE		{ arg = new WarlockWSLScriptVariable($var.text);
	System.out.print("var: \"" + $var.text + "\"\n");
 /*
conditional
	: OPEN_PAREN conditional CLOSE_PAREN
	| conditional BINARY_OP conditional
	| UNARY_OP conditional
	| arg_list COMPARE_OP arg_list
	| TEST_OP arg_list
	;
*/ }
	;
	
WHITESPACE
	: { state != State.command }?=>
		WS+			{ channel = HIDDEN; }
	;
EOL
	: '\r'? '\n' { state = State.base; atStart = true; }
	;
COMMENT
	: { atStart && state == State.base }?=>
		~(NORMAL_CHAR|'%'|WS|'\n'|'\r') (~('\n'|'\r'))* { atStart = false; }
	;
LABEL
	: { state == State.base }?=>
		label=NORMAL_STRING ':'			{ setText($label.text); }
	;
VARIABLE
	: '%' var=NORMAL_STRING { System.out.println("VARIABLE: \"" + $var.text + "\""); setText($var.text); if(state == State.base) state = State.command; }
	;
STRING
	: ({ state == State.command }?=>
		(~('%'|'\n'|'\r'))+)
	| ({ state == State.base}?=>
		NORMAL_STRING WS+ { if(state == State.base) state = State.command; })
	| ('%' ~(NORMAL_CHAR|'\r'|'\n') { if(state == State.base) state = State.command; })
	;

fragment WS
	: (' ' | '\t')
	;
fragment NORMAL_CHAR
	: 'A'..'Z'|'a'..'z'|'0'..'9'|'_'
	;
fragment NORMAL_STRING
	: NORMAL_CHAR+
	;